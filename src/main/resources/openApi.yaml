---
openapi: 3.0.0
info:
  title: Mythostrike
  description: The API for the Web Game Mythostrike
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/TOXOGE9785_1/Mythostrike/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://localhost:8080
  description: SwaggerHub API Auto Mocking
security:
- bearerAuth:
  - user
tags:
- name: Ressources
  description: All Game Data
- name: Users
  description: Authentification of Users
- name: Lobby
  description: Control the Lobby
- name: Game
  description: In-Game moves
paths:
  /ressources/cards:
    get:
      tags:
      - Ressources
      summary: All Cards
      description: Get a list of all game cards
      operationId: getCards
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardList'
      security:
      - {}
  /ressources/modes:
    get:
      tags:
      - Ressources
      summary: All game modes
      description: Get a list of all game modes
      operationId: getGameModes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModeList'
      security:
      - {}
  /ressources/champions:
    get:
      tags:
      - Ressources
      summary: All champions
      description: Get a list of all game champions
      operationId: getChampions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChampionList'
      security:
      - {}
  /users/register:
    post:
      tags:
      - Users
      summary: User registration
      description: Request for user registration
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthRequest'
      responses:
        "201":
          description: successfully registered user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuthResponse'
        "409":
          description: user already exists
      security:
      - {}
  /users/data:
    post:
      tags:
      - Users
      summary: User data
      description: Request for user data from the system
      operationId: getUserData
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
      security:
      - bearerAuth:
        - user
  /users/login:
    post:
      tags:
      - Users
      summary: User login
      description: Request for user login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuthResponse'
        "401":
          description: Wrong username or password
      security:
      - {}
  /lobbies:
    get:
      tags:
      - Lobby
      summary: All lobbies
      description: Get a list of lobbies with details
      operationId: getLobbyOverview
      responses:
        "200":
          description: Lobby overview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LobbyList'
      security:
      - {}
    post:
      tags:
      - Lobby
      summary: Create lobby
      description: Request to create a new lobby
      operationId: createLobby
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLobbyRequest'
      responses:
        "201":
          description: Successfully created lobby
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LobbyId'
      security:
      - bearerAuth:
        - user
  /lobbies/join:
    post:
      tags:
      - Lobby
      summary: Join lobby
      description: Request to join a lobby
      operationId: joinLobby
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LobbyId'
      responses:
        "200":
          description: Successfully joined lobby
        "400":
          description: Lobby already full
        "404":
          description: Lobby does not exist
      security:
      - bearerAuth:
        - user
  /lobbies/leave:
    post:
      tags:
      - Lobby
      summary: Leave lobby
      description: Request to leave the lobby
      operationId: leaveLobby
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LobbyId'
      responses:
        "200":
          description: Successfully left the lobby
      security:
      - bearerAuth:
        - user
  /lobbies/mode:
    put:
      tags:
      - Lobby
      summary: Change game mode
      description: Request to change the game mode in the lobby
      operationId: changeGameMode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeModeRequest'
      responses:
        "200":
          description: Successfully updated game mode
      security:
      - bearerAuth:
        - user
  /lobbies/seats:
    put:
      tags:
      - Lobby
      summary: Change seat
      description: Request to change the seat in the lobby
      operationId: changeSeat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeSeatRequest'
      responses:
        "200":
          description: Successfully updated game mode
        "400":
          description: Seat is not empty
      security:
      - bearerAuth:
        - user
  /lobbies/start:
    post:
      tags:
      - Lobby
      summary: Start game
      description: Request to start the game
      operationId: startGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LobbyId'
      responses:
        "201":
          description: Game started
        "400":
          description: Not enough players
      security:
      - bearerAuth:
        - user
  /lobbies/bot:
    post:
      tags:
      - Lobby
      summary: Add bot
      description: Request to add a bot
      operationId: addBot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LobbyId'
      responses:
        "200":
          description: Successfully added bot
        "400":
          description: Lobby is full
      security:
      - bearerAuth:
        - user
  /games/play/champion:
    post:
      tags:
      - Game
      summary: Select champion
      description: Request to use the selected champion for the game
      operationId: selectedChampion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectChampionRequest'
      responses:
        "200":
          description: Successfully selected the champion
      security:
      - bearerAuth:
        - user
  /games/play/cards:
    post:
      tags:
      - Game
      summary: Play cards
      description: Request to use the selected card(s)
      operationId: playedCards
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayCardsRequest'
      responses:
        "200":
          description: OK
      security:
      - bearerAuth:
        - user
  /games/play/targets:
    post:
      tags:
      - Game
      summary: Select targets
      description: Request to use the selected card(s) on the selected opponent(s).
      operationId: selectedTargets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectTargetsRequest'
      responses:
        "200":
          description: OK
      security:
      - bearerAuth:
        - user
  /games/play/discard:
    post:
      tags:
      - Game
      summary: Discard cards
      description: Request to discard hand cards before the turn ended
      operationId: discardedCards
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscardCardsRequest'
      responses:
        "200":
          description: OK
        "400":
          description: Too many or too less cards are selected
      security:
      - bearerAuth:
        - user
  /games/play/skills:
    post:
      tags:
      - Game
      summary: Use skills
      description: Request to use the selected skill from the champion
      operationId: usedSkills
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaySkillRequest'
      responses:
        "200":
          description: OK
      security:
      - bearerAuth:
        - user
  /games/play/end:
    post:
      tags:
      - Game
      summary: End turn
      description: Request to end the turn
      operationId: endTurn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LobbyId'
      responses:
        "200":
          description: OK
        "400":
          description: Player is in action
      security:
      - bearerAuth:
        - user
components:
  schemas:
    CardList:
      type: array
      items:
        $ref: '#/components/schemas/Card'
    DiscardCardsRequest:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 5313
        CardIdList:
          type: array
          items:
            $ref: '#/components/schemas/CardId'
    Card:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: Nightmare
        description:
          type: string
          example: Pick a player and put...
        symbol:
          type: string
          example: Heart
        value:
          type: integer
          format: int32
          example: 3
        type:
          type: string
          example: Basic
    CardId:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
    ModeList:
      type: array
      items:
        $ref: '#/components/schemas/Mode'
    Mode:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: FFA
        description:
          type: string
          example: In this game mode you can...
        minPlayerCount:
          type: integer
          format: int32
          example: 3
        maxPlayerCount:
          type: integer
          format: int32
          example: 6
    ChampionList:
      type: array
      items:
        $ref: '#/components/schemas/Champion'
    Champion:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 2
        name:
          type: string
          example: Apollo
        maxHp:
          type: integer
          format: int32
          example: 4
        activeSkills:
          type: array
          items:
            $ref: '#/components/schemas/ActiveSkill'
        passiveSkills:
          type: array
          items:
            $ref: '#/components/schemas/PassiveSkill'
    Username:
      type: object
      properties:
        username:
          type: string
          example: Hyumin281
    UserInfo:
      type: object
      properties:
        username:
          type: string
          example: Eason123
        drachma:
          type: integer
          format: int32
          example: 333
        rankPoints:
          type: integer
          format: int32
          example: 48
        avatarNr:
          type: integer
          format: int32
          example: 2
    UserAuthRequest:
      type: object
      properties:
        username:
          type: string
          example: Eason123
        password:
          type: string
          example: BestPW123
    UserAuthResponse:
      type: object
      properties:
        jwtToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    LobbyList:
      type: array
      items:
        $ref: '#/components/schemas/Lobby'
    Lobby:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 2
        owner:
          type: string
          example: Hyuman123
        status:
          type: string
          example: active
        mode:
          type: string
          example: FFA
        numberPlayers:
          type: integer
          format: int32
          example: 5
    LobbyId:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 728491
    ChangeModeRequest:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 5313
        newModeId:
          type: integer
          format: int32
          example: 5
    ChangeSeatRequest:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 5313
        newSeatId:
          type: integer
          format: int32
          example: 5
    CreateLobbyRequest:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 3
    PlayCardsRequest:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 5313
        PlayedCards:
          type: array
          items:
            $ref: '#/components/schemas/CardId'
    PlaySkillRequest:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 5313
        activeSkillId:
          type: integer
          format: int32
          example: 14
    ActiveSkill:
      type: object
      properties:
        name:
          type: string
          example: Revenge
        description:
          type: string
          example: Whenever you get Damage....
    PassiveSkill:
      type: object
      properties:
        name:
          type: string
          example: Infinity Dance
        description:
          type: string
          example: Every time you use....
    SelectChampionRequest:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 352361
        selectedChampionId:
          type: integer
          format: int32
          example: 2
    SelectTargetsRequest:
      type: object
      properties:
        lobbyId:
          type: integer
          format: int32
          example: 5313
        Targets:
          type: array
          items:
            $ref: '#/components/schemas/Username'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
